{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Background Operation ID is a ministry that exists to serve the need of individuals who need to obtain identification documents to support their application for a variety of services from housing to job application. The ministry is volunteer driven and has been in place for over thirty years. During this time thousands of individuals have received help to support their identification needs. Help is provided in the form of vouchers that can be used to pay for services rendered by either the Texas Department of Public Safety for a Texas ID or by the Bureau of Vital Statistics of Texas or another state to acquire a certified copy of a birth certificate. Operation ID makes every attempt to be a good steward of the limited resources available to it. To this end Operation ID seeks to enforce a twice-in-a-lifetime policy with respect to the vouchers it issues. A client of Operation ID is limited to 2 IDs or 2 birth certificates in a lifetime. The 2 IDs restriction applies to Texas state IDs or Texas Drivers licenses or one of each. MkDocs This document was created using MkDocs as was the MkDocs website itself. MkDocs was installed following the guide on this page . This guide is useful for setting up the environment; however, the syntax for the file mkdocs.yml has changed from that described in the guide. The new syntax can be found at in the User Guide section of this document . An MkDocs document is a static website and can be hosted by any service that supports static sites. This MkDocs document is hosted by GitHub Pages . The Atom open source text editor was used to develop the document on the desktop. An MkDocs document uses HTML Markdown for a desktop development version of a document. GitHub provides a cheatsheet for Markdown syntax . MkDocs provides a built-in preview server. To start this server, open a BASH Shell on the folder containing the mkdoc.yml file of the project and execute mkdocs serve Then go to http://127.0.0.1:8000 in a desktop browser. Pages can be edited and saved while in preview mode. The changes will be reflected in the browser document. When it is time to publish a version of a document, in a Git BASH shell opened on the folder containing the mkdocs.yml file, issue the command mkdocs build to expand the Markdown version of the document into an HTML version in the /site folder. Then open the Git GUI on the folder containing the mkdocs.yml file and use the GUI to create a new Git repository on the local disk. Next at GitHub create repository opiddchecksdoc to hold the documentation. Then create a repository on the desktop machine to associate with the GitHub repository. Issue the following command in the folder containing the mkdocs.yml file: git init After this, in the folder containing the mkdocs.yml file, define a remote called origin for the document: git remote add origin https://github.com/tmhsplb/opidchecksdoc This command references the GitHub repository opidchecksdoc. The remote only needs to be defined once. It will be remembered by the Git BASH shell. In the shell issue the following commands: git add -A git commit -a -m 'Initial commit' git push origin master This will push the master branch of the document to the repository identified by the remote called origin. Then click on the Settings tab for the newly created repository and scroll down to the GitHub Pages section. Select the master branch source and click on the Save button. Finally, to view the published document go to: https://tmhsplb.github.io/opidchecksdoc/site Unless a new file is added to file mkdocs.yml , subsequent edits only require the commands mkdocs build git commit -a -m '<Comment for new commit>' git push origin master to update repository opidchecksdoc at GitHub. If a new file is added to mkdocs.yml then git add -A must be run before the mkdocs build command is run. This causes any new files to be added to the local git repository. In either case it may take several minutes before edits are available.","title":"Background"},{"location":"#background","text":"Operation ID is a ministry that exists to serve the need of individuals who need to obtain identification documents to support their application for a variety of services from housing to job application. The ministry is volunteer driven and has been in place for over thirty years. During this time thousands of individuals have received help to support their identification needs. Help is provided in the form of vouchers that can be used to pay for services rendered by either the Texas Department of Public Safety for a Texas ID or by the Bureau of Vital Statistics of Texas or another state to acquire a certified copy of a birth certificate. Operation ID makes every attempt to be a good steward of the limited resources available to it. To this end Operation ID seeks to enforce a twice-in-a-lifetime policy with respect to the vouchers it issues. A client of Operation ID is limited to 2 IDs or 2 birth certificates in a lifetime. The 2 IDs restriction applies to Texas state IDs or Texas Drivers licenses or one of each.","title":"Background"},{"location":"#mkdocs","text":"This document was created using MkDocs as was the MkDocs website itself. MkDocs was installed following the guide on this page . This guide is useful for setting up the environment; however, the syntax for the file mkdocs.yml has changed from that described in the guide. The new syntax can be found at in the User Guide section of this document . An MkDocs document is a static website and can be hosted by any service that supports static sites. This MkDocs document is hosted by GitHub Pages . The Atom open source text editor was used to develop the document on the desktop. An MkDocs document uses HTML Markdown for a desktop development version of a document. GitHub provides a cheatsheet for Markdown syntax . MkDocs provides a built-in preview server. To start this server, open a BASH Shell on the folder containing the mkdoc.yml file of the project and execute mkdocs serve Then go to http://127.0.0.1:8000 in a desktop browser. Pages can be edited and saved while in preview mode. The changes will be reflected in the browser document. When it is time to publish a version of a document, in a Git BASH shell opened on the folder containing the mkdocs.yml file, issue the command mkdocs build to expand the Markdown version of the document into an HTML version in the /site folder. Then open the Git GUI on the folder containing the mkdocs.yml file and use the GUI to create a new Git repository on the local disk. Next at GitHub create repository opiddchecksdoc to hold the documentation. Then create a repository on the desktop machine to associate with the GitHub repository. Issue the following command in the folder containing the mkdocs.yml file: git init After this, in the folder containing the mkdocs.yml file, define a remote called origin for the document: git remote add origin https://github.com/tmhsplb/opidchecksdoc This command references the GitHub repository opidchecksdoc. The remote only needs to be defined once. It will be remembered by the Git BASH shell. In the shell issue the following commands: git add -A git commit -a -m 'Initial commit' git push origin master This will push the master branch of the document to the repository identified by the remote called origin. Then click on the Settings tab for the newly created repository and scroll down to the GitHub Pages section. Select the master branch source and click on the Save button. Finally, to view the published document go to: https://tmhsplb.github.io/opidchecksdoc/site Unless a new file is added to file mkdocs.yml , subsequent edits only require the commands mkdocs build git commit -a -m '<Comment for new commit>' git push origin master to update repository opidchecksdoc at GitHub. If a new file is added to mkdocs.yml then git add -A must be run before the mkdocs build command is run. This causes any new files to be added to the local git repository. In either case it may take several minutes before edits are available.","title":"MkDocs"},{"location":"Database/","text":"Database OPIDDaily is a database driven application built using SQL Server technology. In the desktop environment OPIDDaily is built using the Sql Server Express database engine. In the online environment at AppHarbor a full SQL Server is used. The two versions are compatible with each other with respect to the database features used. SQL Server Management Studio v18.0 (SSMS) is used to manage both database engines. In the desktop environment, Windows Authentication is used to connect to the Sql Server Express database. In the online enviroment, SQL Server Authentication is used to connect to the SQL Server database. When application OPIDDaily was created at AppHarbor, a free version of SQL Server was added on through the AppHarbor interface. The connection string to this SQL Server is found by selecting the SQL Server add-on and following the \"Go to SQL Server\" link on the page that appears. The value of this connection string is stored as the value of Config.WorkingProductionConnection string on file Config.cs. The 3 components of the connection string, HostName, UserName and Password, are also displayed on this page. The components may be used to configure a SQL Server Authentication connection to the AppHarbor database through SSMS. The same connection string displayed at AppHarbor is retrieved at runtime by accessing Config.ConnectionString, which returns the value of SQLSERVER_CONNNECTION_STRING configured in the <appSettings> section of file Web.config. The statically configured value on file Web.Config points to the OpidDailyDB on the desktop SQL Server Express. At runtime, AppHarbor will overwrite this statically configured value with the value displayed at AppHarbor. See the section on the Connection String on this tab. Connection String In the desktop environment, SSMS was used to create an empty project database by executing the SQL query create database OpidDailyDB The Visual Studio Server Explorer (found under the OPIDDaily project View menu) was then used to discover the connection string to database OpidDailyDB by creating a new Data Connection to it and copying the Connection String property of the data connection as the value of the variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The value is accessed on files IDentityDB.cs and OpidDailyDB.cs by reading the value of the static variable Config.ConnectionString. The online version of OPIDDaily is hosted as an application at AppHarbor and it uses a database server provided as an add-on. The add-on database server includes a database which serves as the application database, so it is not necessary to create the application database as was done above for the desktop version. ELMAH uses the configuration string used by the OPIDDaily application. This is accomplished by configuring the connection string OpidDailyConnectionString in the <connectionStrings> section on Web.config and setting the connection string alias for the SQL Server add-on at AppHarbor to be OpidDailyConnectionString . To set this alias, select the SQL Server add-on for application OPIDDaily at AppHarbor and then follow the link \"Go to SQL Server\" on the page that appears. Click the button labeled \"Edit database configuration\" to set OpidDailyConnectionString as the alias value for the connection string. When this is done, OpidDailyConnectionString will appear as the value of SQLSERVER_CONNECTION_STRING_ALIAS in the Configuration variables section of application OPIDDaily at AppHarbor. When application OPIDDaily is deployed to AppHarbor, this alias will overwrite the configured value on file Web.config by the value of the connection string for the AppHarbor database. This is explained in the same knowledge base article referenced above. Database Diagram The diagram was created by SSMS, copied to the clipboard (using the \"Copy Diagram to Clipboard\" command found on the freespace context menu) and then pasted into the Paint tool. Inside of Paint it is saved as a .PNG file. Version 18.0 of SSMS does not allow database diagrams to be created. Newer releases have restored this capability. But the diagram seen here was created by an earlier release of SSMS, which did have the ability to create database diagrams. The 3 tables in the upper left of the above diagram are created by ASP.NET Identity 2.0 to manage registered users of OPIDDaily. The 3 tables are managed by their own data context which cannot be augmented by additional tables. However, data fields can be added to table AspNetUsers if necessary. The data field AgencyId was added to table AspNetUsers to store the unique AgencyId stored in table Agencies by the Superadmin user. (The AgencyId of an Operation ID user - example the TicketMaster user - is always 0.) Non ASP.NET Identity tables in the diagram are managed by a separate data context. The 2 data contexts of project OPIDDaily are referred to as IdentityDb and OpidDailyDB. (See the section Entity Framework Code First of the Infrastructure tab.) The technique for establishing a single connection string over 2 data contexts is described in Scott Allen's Pluralsight video . The tables belonging to data context OpidDailyDB were created at AppHarbor using a script file. This was done by running the command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration -Script -SourceMigration $InitialDatabase to generate a SQL script to be run in SSMS against the database at AppHarbor. The command created a script file necessary to create the tables for this data context using all the migrations applied since the initial migration. Notice that there is no colon (:) following -SourceMigration in this command. To generate a script to run the Down methods of multiple down-migrations, do, for example, PM> Update-Database -ConfigurationTypeName OPIDDAILY.DataContexts.OpidDailyMigrations.Configuration -Script -TargetMigration: ExpressClient Notice that there is a colon (:) following -TargetMigration in this command. This command will create a script to run the Down methods of all migrations since (and not including) migration ExpressClient. It is important to be able to generate this script if changes need to be backed out, because the deployed versions of application OPIDDaily do not use Entity Framework to manage the database. Managing Users OPIDDaily is a role based database application administered by a Superadmin user. The Superadmin user has the responsibilty of establishing a login account for each OPIDDaily user, which includes the use's role. This is done prevent a user from specifying his/her own role when logging in and to force the user into his/her assigned role instead. See the introduction and Role Controllers sections of the Impementation tab for a discussion of roles. The Superadmin will be given a user name and email address for a new user. For example, if Mary Atwood would like to use the user name Mary and email address maryatwood@gmail.com, this request would be given to the Superadmin user. Provided that the user name Mary is not already in use, the Superadmin user would use a private interface to enter Mary Atwood in the Invitations table under UserName Mary (with FullName Mary Atwood) and Email Address maryatwood@gmail.com. The Supeadmin would also use the OPIDDaily interface to assign a role to user Mary Atwood in the Invitations table. The record in the Invitations table is in effect an invitation for Mary Atwood to register under user name Mary and email address maryatwood@gmail.com in the assigned role. The Superadmin will notify Mary that her account has been created and that she may register with application OPIDDaily using the credentials she has supplied together with a password of her own choosing. When Mary registers, the user name and email address she provides will be checked against the Invitations table. If this pair of credentials is not found in the Invitations table, Mary's attempt to register will be rejected. If they are found, a record will be created for her in the AspNetUsers table using the password she has specified and using the role assigned by the Superadmin, which has been stored in the Invitations table. On subsequent visits to OPIDDaily, Mary may simply login with the credentials established by her registration. When logged in she will be recognized in her assigned role. User email addresses do not need to be unique per account. This is not the default behavior; it is enabled by the setting RequireUniqueEmail = false in method ApplicationUserManager.Create on file App_Start/IdentityConfig.cs There are two special accounts reserved for usage by the two users who serve at the front desk on any given day of operation. Each of these accounts has the pre-assigned role called FrontDesk. The users are the Screener and the TicketMaster which correspond to the pipeline stages Screening and Checkin , respectively. (See the Background tab for information about the pipeline stages.) Having dedicated accounts avoids the need to create unique accounts in the role of FrontDesk. There are also two additional special users called Client1 and Client2 corresponding to the pipeline stages Screening and CheckIn , respectively. (See the Background tab for information about the pipeline stages.) During the screening stage, the Screener user will enter the name and date of birth of an entering client into the OPIDDaily database. To ensure that this information has been correctly entered, the Screener may click a button to have this information appear on a small tablet computer which will be handed to the client for verification. This small tablet computer will be logged into the OPIDDaily application as Client1 . During the Checkin stage, by consultng the Apricot database, the TicketMaster user will record any previous visit history by a screened client in the OPIDDaily database. If previous visits indicate that the screened client is ineligible for a service being sought, the TicketMaser may click a button to have the visit history appear on a second small tablet computer which will be handed to the client. This second small tablet computer will be logged into the OPIDDaily application as Client2 . Both users Client1 and Client2 are assigned the role FrontDesk. Database Utilization SSMS can be used to check on the utilization of a datbase. To do so: Right click a database name Navigate to Reports > Standard Reports > Disk Usage This is important because of the 20MB disk space limit of a free AppHarbor database. Use it to make sure the disk limits are not exceeded. Application OPIDDaily allows the Superadmin user to delete client datbase records corresponding to previous days of operation. This must be done periodically to avoid exceeding the 20MB limit.","title":"Database"},{"location":"Database/#database","text":"OPIDDaily is a database driven application built using SQL Server technology. In the desktop environment OPIDDaily is built using the Sql Server Express database engine. In the online environment at AppHarbor a full SQL Server is used. The two versions are compatible with each other with respect to the database features used. SQL Server Management Studio v18.0 (SSMS) is used to manage both database engines. In the desktop environment, Windows Authentication is used to connect to the Sql Server Express database. In the online enviroment, SQL Server Authentication is used to connect to the SQL Server database. When application OPIDDaily was created at AppHarbor, a free version of SQL Server was added on through the AppHarbor interface. The connection string to this SQL Server is found by selecting the SQL Server add-on and following the \"Go to SQL Server\" link on the page that appears. The value of this connection string is stored as the value of Config.WorkingProductionConnection string on file Config.cs. The 3 components of the connection string, HostName, UserName and Password, are also displayed on this page. The components may be used to configure a SQL Server Authentication connection to the AppHarbor database through SSMS. The same connection string displayed at AppHarbor is retrieved at runtime by accessing Config.ConnectionString, which returns the value of SQLSERVER_CONNNECTION_STRING configured in the <appSettings> section of file Web.config. The statically configured value on file Web.Config points to the OpidDailyDB on the desktop SQL Server Express. At runtime, AppHarbor will overwrite this statically configured value with the value displayed at AppHarbor. See the section on the Connection String on this tab.","title":"Database"},{"location":"Database/#connection-string","text":"In the desktop environment, SSMS was used to create an empty project database by executing the SQL query create database OpidDailyDB The Visual Studio Server Explorer (found under the OPIDDaily project View menu) was then used to discover the connection string to database OpidDailyDB by creating a new Data Connection to it and copying the Connection String property of the data connection as the value of the variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The value is accessed on files IDentityDB.cs and OpidDailyDB.cs by reading the value of the static variable Config.ConnectionString. The online version of OPIDDaily is hosted as an application at AppHarbor and it uses a database server provided as an add-on. The add-on database server includes a database which serves as the application database, so it is not necessary to create the application database as was done above for the desktop version. ELMAH uses the configuration string used by the OPIDDaily application. This is accomplished by configuring the connection string OpidDailyConnectionString in the <connectionStrings> section on Web.config and setting the connection string alias for the SQL Server add-on at AppHarbor to be OpidDailyConnectionString . To set this alias, select the SQL Server add-on for application OPIDDaily at AppHarbor and then follow the link \"Go to SQL Server\" on the page that appears. Click the button labeled \"Edit database configuration\" to set OpidDailyConnectionString as the alias value for the connection string. When this is done, OpidDailyConnectionString will appear as the value of SQLSERVER_CONNECTION_STRING_ALIAS in the Configuration variables section of application OPIDDaily at AppHarbor. When application OPIDDaily is deployed to AppHarbor, this alias will overwrite the configured value on file Web.config by the value of the connection string for the AppHarbor database. This is explained in the same knowledge base article referenced above.","title":"Connection String"},{"location":"Database/#database-diagram","text":"The diagram was created by SSMS, copied to the clipboard (using the \"Copy Diagram to Clipboard\" command found on the freespace context menu) and then pasted into the Paint tool. Inside of Paint it is saved as a .PNG file. Version 18.0 of SSMS does not allow database diagrams to be created. Newer releases have restored this capability. But the diagram seen here was created by an earlier release of SSMS, which did have the ability to create database diagrams. The 3 tables in the upper left of the above diagram are created by ASP.NET Identity 2.0 to manage registered users of OPIDDaily. The 3 tables are managed by their own data context which cannot be augmented by additional tables. However, data fields can be added to table AspNetUsers if necessary. The data field AgencyId was added to table AspNetUsers to store the unique AgencyId stored in table Agencies by the Superadmin user. (The AgencyId of an Operation ID user - example the TicketMaster user - is always 0.) Non ASP.NET Identity tables in the diagram are managed by a separate data context. The 2 data contexts of project OPIDDaily are referred to as IdentityDb and OpidDailyDB. (See the section Entity Framework Code First of the Infrastructure tab.) The technique for establishing a single connection string over 2 data contexts is described in Scott Allen's Pluralsight video . The tables belonging to data context OpidDailyDB were created at AppHarbor using a script file. This was done by running the command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration -Script -SourceMigration $InitialDatabase to generate a SQL script to be run in SSMS against the database at AppHarbor. The command created a script file necessary to create the tables for this data context using all the migrations applied since the initial migration. Notice that there is no colon (:) following -SourceMigration in this command. To generate a script to run the Down methods of multiple down-migrations, do, for example, PM> Update-Database -ConfigurationTypeName OPIDDAILY.DataContexts.OpidDailyMigrations.Configuration -Script -TargetMigration: ExpressClient Notice that there is a colon (:) following -TargetMigration in this command. This command will create a script to run the Down methods of all migrations since (and not including) migration ExpressClient. It is important to be able to generate this script if changes need to be backed out, because the deployed versions of application OPIDDaily do not use Entity Framework to manage the database.","title":"Database Diagram"},{"location":"Database/#managing-users","text":"OPIDDaily is a role based database application administered by a Superadmin user. The Superadmin user has the responsibilty of establishing a login account for each OPIDDaily user, which includes the use's role. This is done prevent a user from specifying his/her own role when logging in and to force the user into his/her assigned role instead. See the introduction and Role Controllers sections of the Impementation tab for a discussion of roles. The Superadmin will be given a user name and email address for a new user. For example, if Mary Atwood would like to use the user name Mary and email address maryatwood@gmail.com, this request would be given to the Superadmin user. Provided that the user name Mary is not already in use, the Superadmin user would use a private interface to enter Mary Atwood in the Invitations table under UserName Mary (with FullName Mary Atwood) and Email Address maryatwood@gmail.com. The Supeadmin would also use the OPIDDaily interface to assign a role to user Mary Atwood in the Invitations table. The record in the Invitations table is in effect an invitation for Mary Atwood to register under user name Mary and email address maryatwood@gmail.com in the assigned role. The Superadmin will notify Mary that her account has been created and that she may register with application OPIDDaily using the credentials she has supplied together with a password of her own choosing. When Mary registers, the user name and email address she provides will be checked against the Invitations table. If this pair of credentials is not found in the Invitations table, Mary's attempt to register will be rejected. If they are found, a record will be created for her in the AspNetUsers table using the password she has specified and using the role assigned by the Superadmin, which has been stored in the Invitations table. On subsequent visits to OPIDDaily, Mary may simply login with the credentials established by her registration. When logged in she will be recognized in her assigned role. User email addresses do not need to be unique per account. This is not the default behavior; it is enabled by the setting RequireUniqueEmail = false in method ApplicationUserManager.Create on file App_Start/IdentityConfig.cs There are two special accounts reserved for usage by the two users who serve at the front desk on any given day of operation. Each of these accounts has the pre-assigned role called FrontDesk. The users are the Screener and the TicketMaster which correspond to the pipeline stages Screening and Checkin , respectively. (See the Background tab for information about the pipeline stages.) Having dedicated accounts avoids the need to create unique accounts in the role of FrontDesk. There are also two additional special users called Client1 and Client2 corresponding to the pipeline stages Screening and CheckIn , respectively. (See the Background tab for information about the pipeline stages.) During the screening stage, the Screener user will enter the name and date of birth of an entering client into the OPIDDaily database. To ensure that this information has been correctly entered, the Screener may click a button to have this information appear on a small tablet computer which will be handed to the client for verification. This small tablet computer will be logged into the OPIDDaily application as Client1 . During the Checkin stage, by consultng the Apricot database, the TicketMaster user will record any previous visit history by a screened client in the OPIDDaily database. If previous visits indicate that the screened client is ineligible for a service being sought, the TicketMaser may click a button to have the visit history appear on a second small tablet computer which will be handed to the client. This second small tablet computer will be logged into the OPIDDaily application as Client2 . Both users Client1 and Client2 are assigned the role FrontDesk.","title":"Managing Users"},{"location":"Database/#database-utilization","text":"SSMS can be used to check on the utilization of a datbase. To do so: Right click a database name Navigate to Reports > Standard Reports > Disk Usage This is important because of the 20MB disk space limit of a free AppHarbor database. Use it to make sure the disk limits are not exceeded. Application OPIDDaily allows the Superadmin user to delete client datbase records corresponding to previous days of operation. This must be done periodically to avoid exceeding the 20MB limit.","title":"Database Utilization"},{"location":"Implementation/","text":"Implementation Application OPIDChecks is implemented as an ASP.NET Framework application using the ASP.NET MVC 5 project template provided by Visual Studio 2019 (Community Edition). It uses ASP.NET Identity 2.0 to define a set of user roles. Each user role is associated with a separate MVC controller. It may be useful to upgrade application OPIDChecks to use the more modern ASP.NET Core technology. It may also be useful to provide an alternative to the free hosting service AppHarbor, which is currently used by OPIDChecks. See the AppHarbor section of the Infrastructure tab for details on this. The graphical user interface of OPIDChecks is built using Bootstrap 3.0.0. Each user role is associated with its own layout file which defines a Bootstrap navbar containing links to the OPIDChecks features available to users in the role. The ASP.NET Identity system ensures that a user in a specified role cannot visit any pages outside of those allowed to users in that role. (See the section on Role Controllers.) Because of its use of SignalR, application OPIDChecks will always require a server side component. See the section on SignalR on this tab for a discussion of this. Users OPIDChecks is a role-based system. Each registered user will be assigned a user role by the OPIDChecks administrator. The role that a user is assigned will determine the OPIDChecks features available to the user. The OPIDChecks administrator will be in the role of Superadmin and will have access to features necessary for the maintenance of application OPIDChecks. There will be only one Superadmin account, but the credentials for this account will be available to maintainers of the application. The Superadmin User OPIDDaily defines a pre-registered Superadmin user who has privileges to create new roles invite new users to register in a pre-determined role The credentials for the Superadmin user are configured on file Startup.cs. There is only a single user with role of Superadmin. MVC Routing Application OPIDChecks uses only the default routing rule supplied by the Visual Studio MVC 5 template. This default routing rule is found in .../App_Start/RouteConfig.cs . routes.MapRoute( name: \"Default\", url: \"{controller}/{action}/{id}\", defaults: new { controller = \"Users\", action = \"Index\", id = UrlParameter.Optional } ); For the sake of simplicity, future development of application OPIDChecks should strive to keep this as the one and only routing rule. The UsersController The UsersController controls access to the ASP.NET Identity tables used to store registered users and the roles they a are in. The method UsersController.Index is the entry point for an authenticated user. The role an authenticated user is in determines the method the user will be redirected to from this entry point. SignalR Application OPIDChecks uses version 2.4.1 of the JavaScript SignalR package installed via NuGet. SignalR is used in the implementation of progress bars used by application OPIDChecks.","title":"Implementation"},{"location":"Implementation/#implementation","text":"Application OPIDChecks is implemented as an ASP.NET Framework application using the ASP.NET MVC 5 project template provided by Visual Studio 2019 (Community Edition). It uses ASP.NET Identity 2.0 to define a set of user roles. Each user role is associated with a separate MVC controller. It may be useful to upgrade application OPIDChecks to use the more modern ASP.NET Core technology. It may also be useful to provide an alternative to the free hosting service AppHarbor, which is currently used by OPIDChecks. See the AppHarbor section of the Infrastructure tab for details on this. The graphical user interface of OPIDChecks is built using Bootstrap 3.0.0. Each user role is associated with its own layout file which defines a Bootstrap navbar containing links to the OPIDChecks features available to users in the role. The ASP.NET Identity system ensures that a user in a specified role cannot visit any pages outside of those allowed to users in that role. (See the section on Role Controllers.) Because of its use of SignalR, application OPIDChecks will always require a server side component. See the section on SignalR on this tab for a discussion of this.","title":"Implementation"},{"location":"Implementation/#users","text":"OPIDChecks is a role-based system. Each registered user will be assigned a user role by the OPIDChecks administrator. The role that a user is assigned will determine the OPIDChecks features available to the user. The OPIDChecks administrator will be in the role of Superadmin and will have access to features necessary for the maintenance of application OPIDChecks. There will be only one Superadmin account, but the credentials for this account will be available to maintainers of the application.","title":"Users"},{"location":"Implementation/#the-superadmin-user","text":"OPIDDaily defines a pre-registered Superadmin user who has privileges to create new roles invite new users to register in a pre-determined role The credentials for the Superadmin user are configured on file Startup.cs. There is only a single user with role of Superadmin.","title":"The Superadmin User"},{"location":"Implementation/#mvc-routing","text":"Application OPIDChecks uses only the default routing rule supplied by the Visual Studio MVC 5 template. This default routing rule is found in .../App_Start/RouteConfig.cs . routes.MapRoute( name: \"Default\", url: \"{controller}/{action}/{id}\", defaults: new { controller = \"Users\", action = \"Index\", id = UrlParameter.Optional } ); For the sake of simplicity, future development of application OPIDChecks should strive to keep this as the one and only routing rule.","title":"MVC Routing"},{"location":"Implementation/#the-userscontroller","text":"The UsersController controls access to the ASP.NET Identity tables used to store registered users and the roles they a are in. The method UsersController.Index is the entry point for an authenticated user. The role an authenticated user is in determines the method the user will be redirected to from this entry point.","title":"The UsersController"},{"location":"Implementation/#signalr","text":"Application OPIDChecks uses version 2.4.1 of the JavaScript SignalR package installed via NuGet. SignalR is used in the implementation of progress bars used by application OPIDChecks.","title":"SignalR"},{"location":"Infrastructure/","text":"Hosting Environments There are 2 hosting environments for application OPIDChecks: desktop and production. They differ in the database connection string used by each. The connection string is configured as the value of variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The static value configured there is used by the desktop environment. The static value is overwritten by injection (at AppHarbor) when OPIDChecks is deployed to create the production release. The transformation file Web.Release.config plays a role in this deployments. The production deployment at AppHarbor has its Environment variable set to Release by default. This causes Web.Release.config to be used upon deployment. Visual Studio Project The Visual Studio 2019 (Community Edition) project representing application OPIDChecks was developed using an ASP.NET Identity 2.0 sample project developed by Syed Shanu as a starting point. The project is described in the excellent CodeProject article ASP.NET MVC Security and Creating User Role . The sample project uses the Visual Studio MVC5 project template and makes use of Katana OWIN middleware for user authentication. The use of Katana is built into the ASP.NET Identity 2.0 provider used by the project template, as is explained in the CodeProject article. On the Properties page of the Visual Studio project, remember to select Local IIS as the server and click the Create Virtual Directory button to set http://localhost/OpidChecks as the Project Url. These two actions create an application called OpidChecks under the Default Web Site in IIS and enable project OpidChecks to be run in a desktop version of IIS under this Url. Without this, the desktop IIS cannot be used to host the application. See the section on configuring IIS below. When the codebase is installed on a developer's Visual Studio instance on his/her machine by cloning the GitHub repository OPIDDaily , the developer must use Visual Studio to create a staging branch and then rebase this branch to origin/master . This will cause the remote changes to appear in the local staging branch without the need to Fetch and Pull them as is done between a remote master branch and a local master branch. SQL Server Express and SSMS The desktop version of OPIDDaily makes use of a SQL Server Express to store information about clients. The database is managed by v18.0 of SQL Server Management Studio (SSMS). Visual Studio includes the ability to view an installed SQL Server Express database, but it is more convenient to have SQL Server Management Studio available for this purpose. SQL Server Express and SSMS require separate (lengthy) downloads. The SQL Server Express database for OPIDDaily was created by executing the SQL query create database OPIDDailyDB executed inside of SSMS. With this database selected in SSMS, there are two SQL queries that need to be executed to enable IIS to talk to SQL Server Express. The first query is CREATE USER [NT AUTHORITY\\NETWORK SERVICE] FOR LOGIN [NT AUTHORITY\\NETWORK SERVICE] WITH DEFAULT_SCHEMA = dbo; This query creates the database user NT AUTHORITY\\NETWORK SERVICE. The second query is EXEC sp_addrolemember 'db_owner', 'NT AUTHORITY\\NETWORK SERVICE' This query grants user NT AUTHORITY\\NETWORK SERVICE the necessary permissions to communicate with IIS. These same two queries do not need to be executed in the AppHarbor database to prepare it to communicate with IIS. See below for information about the AppHarbor deployment of OPIDDaily. It is also necessary to change the application pool identity of application OPIDDaily running under IIS to NETWORKSERVICE. See the section on configuring IIS. There is a bug in SSMS v18.0 that causes it to stop after launch; the splash screen will display and then SSMS will quit. The fix for this is to edit file ssms.exe.config found in folder C:\\\\Program Files (x86)\\Microsoft SQL Server Management Studio 18\\Common7\\IDE and remove (or comment out) the line which has the text: <NgenBind_OptimizeNonGac enabled=\"1\" /> This should be around line 38. Then restart SSMS. SSMS v18.0 does not have the capability to generate database diagrams. Previous versions of SSMS had this capability, but it was removed from v18.0. The capability has been added back to newer version of SSMS. Git for Windows Visual Studio 2019 (Community Edition) comes with built-in support for GitHub. A new project can be added to Git source control on the desktop by simply selecting Add to Source Control from the context menu of the Solution file in the Solution Explorer. Once a project is under Git source control it can be added to a remote GitHub repository by using tools available through Visual Studio. However, a technique preferred by many developers is to use Git for Windows . Git for Windows provides a BASH shell interface to GitHub which uses the same set of commands available at GitHub itself. Git for Windows integrates with Windows Explorer to allow a BASH shell to be opened on a project that has been added to a desktop Git repository. Simply point Windows Explorer at the folder containing the project solution file and select Git BASH Here from the context menu of the folder to open a Git for Windows BASH shell. Then execute Git commands from this shell window. Git for Windows also offers Git GUI, a graphical version of most Git command line functions. To open Git GUI simply select Git GUI Here from Windows Explorer. GitHub Application OPIDChecks is stored at GitHub as a repository under an account with the email address peter3418@ymail.com and account name tmhsplb. Only user tmhsplb can deploy directly to this repository. Any other user needing to deploy a version of OPIDChecks to this repository must be declared a collaborator on repository OPIDChecks by user tmhsplb. A collaborator is a user associated with a different account established at GitHub. Git for Windows was used to create a remote to save to this GitHub account. The remote was created in the Git BASH shell by opening the shell on the folder which contains the OPIDDaily.sln file (folder C:/VS2019Projects/OPIDChecks ) and issuing the command git remote add origin https://github.com/tmhsplb/opidchecks.git Creating this remote only needs to be done once, because Git for Windows stores the remote. To remove a remote use the command git remote rm myremote The need for this may arise if there was a typo in the creation of myremote. AppHarbor AppHarbor (appharbor.com) is a Platform as a Service Provider which uses Amazon Web Services infrastructure for hosting applications and Git as a versioning tool. When an application is defined at AppHarbor, a Git repository is created to manage versions of the application's deployment. The OPIDChecks application is defined as an application at AppHarbor to create the production repository of the desktop application. The remote configured for OPIDChecks at AppHarbor is: https://tmhsplb@appharbor.com/opidchecks.git This remote is configured from a Windows Git BASH shell by the command git remote add opidchecks https://tmhsplb@appharbor.com/opidchecks.git After the remote is configured in the Git BASH shell, issuing the command git push opidchecks master will deploy the master branch of solution opidchecks to AppHarbor as application OPIDChecks, accessible through the URL https://opidchecks.apphb.com If you reset your password at AppHarbor, the 'git push' command will no longer work from the Git BASH shell. You need to have Git prompt you for your new password. To do this on a Windows 10 machine, go to Control Panel > User Accounts > Credential Manager > Windows Credentials and remove the AppHarbor entry under Generic Credentials. The next time you push, you will be prompted for your repository password. Application OPIDChecks is deployed using the free Canoe subscription level at AppHarbor. Under a Canoe subscription, the IIS application pool of application OPIDChecks has a 20 minute timeout, which forces OPIIDChecks to spin up its resources again after 20 minutes of idle time. The free Yocto version of SQL Server is used as an add-on to the OPIDChecks deployment. The Yocto version has a limit of 20MB of storage space. However, the database usage must be monitored to avoid exceeding the 20MB limit. See the Database Utilization section on the Database tab for how to do this. A paid subscription to a SQL Server at AppHarbor would alleviate this problem. Deployment This section summarizes deployment to AppHarbor. Much of the information here can be found in the section on AppHarbor. After configuring the master remote the Visual Studio production branch can be deployed to AppHarbor by using the Git BASH Shell command git push opidchecks master AppHarbor will automatically deploy application OPIDChecks if the push results in a successful build. After AppHarbor finishes building and deploying the code, application OPIDChecks can be viewed at https://opidchecks.apphb.com This URL can be bookmarked on the browser bookmarks bar for ease of access.","title":"Infrastructure"},{"location":"Infrastructure/#hosting-environments","text":"There are 2 hosting environments for application OPIDChecks: desktop and production. They differ in the database connection string used by each. The connection string is configured as the value of variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The static value configured there is used by the desktop environment. The static value is overwritten by injection (at AppHarbor) when OPIDChecks is deployed to create the production release. The transformation file Web.Release.config plays a role in this deployments. The production deployment at AppHarbor has its Environment variable set to Release by default. This causes Web.Release.config to be used upon deployment.","title":"Hosting Environments"},{"location":"Infrastructure/#visual-studio-project","text":"The Visual Studio 2019 (Community Edition) project representing application OPIDChecks was developed using an ASP.NET Identity 2.0 sample project developed by Syed Shanu as a starting point. The project is described in the excellent CodeProject article ASP.NET MVC Security and Creating User Role . The sample project uses the Visual Studio MVC5 project template and makes use of Katana OWIN middleware for user authentication. The use of Katana is built into the ASP.NET Identity 2.0 provider used by the project template, as is explained in the CodeProject article. On the Properties page of the Visual Studio project, remember to select Local IIS as the server and click the Create Virtual Directory button to set http://localhost/OpidChecks as the Project Url. These two actions create an application called OpidChecks under the Default Web Site in IIS and enable project OpidChecks to be run in a desktop version of IIS under this Url. Without this, the desktop IIS cannot be used to host the application. See the section on configuring IIS below. When the codebase is installed on a developer's Visual Studio instance on his/her machine by cloning the GitHub repository OPIDDaily , the developer must use Visual Studio to create a staging branch and then rebase this branch to origin/master . This will cause the remote changes to appear in the local staging branch without the need to Fetch and Pull them as is done between a remote master branch and a local master branch.","title":"Visual Studio Project"},{"location":"Infrastructure/#sql-server-express-and-ssms","text":"The desktop version of OPIDDaily makes use of a SQL Server Express to store information about clients. The database is managed by v18.0 of SQL Server Management Studio (SSMS). Visual Studio includes the ability to view an installed SQL Server Express database, but it is more convenient to have SQL Server Management Studio available for this purpose. SQL Server Express and SSMS require separate (lengthy) downloads. The SQL Server Express database for OPIDDaily was created by executing the SQL query create database OPIDDailyDB executed inside of SSMS. With this database selected in SSMS, there are two SQL queries that need to be executed to enable IIS to talk to SQL Server Express. The first query is CREATE USER [NT AUTHORITY\\NETWORK SERVICE] FOR LOGIN [NT AUTHORITY\\NETWORK SERVICE] WITH DEFAULT_SCHEMA = dbo; This query creates the database user NT AUTHORITY\\NETWORK SERVICE. The second query is EXEC sp_addrolemember 'db_owner', 'NT AUTHORITY\\NETWORK SERVICE' This query grants user NT AUTHORITY\\NETWORK SERVICE the necessary permissions to communicate with IIS. These same two queries do not need to be executed in the AppHarbor database to prepare it to communicate with IIS. See below for information about the AppHarbor deployment of OPIDDaily. It is also necessary to change the application pool identity of application OPIDDaily running under IIS to NETWORKSERVICE. See the section on configuring IIS. There is a bug in SSMS v18.0 that causes it to stop after launch; the splash screen will display and then SSMS will quit. The fix for this is to edit file ssms.exe.config found in folder C:\\\\Program Files (x86)\\Microsoft SQL Server Management Studio 18\\Common7\\IDE and remove (or comment out) the line which has the text: <NgenBind_OptimizeNonGac enabled=\"1\" /> This should be around line 38. Then restart SSMS. SSMS v18.0 does not have the capability to generate database diagrams. Previous versions of SSMS had this capability, but it was removed from v18.0. The capability has been added back to newer version of SSMS.","title":"SQL Server Express and SSMS"},{"location":"Infrastructure/#git-for-windows","text":"Visual Studio 2019 (Community Edition) comes with built-in support for GitHub. A new project can be added to Git source control on the desktop by simply selecting Add to Source Control from the context menu of the Solution file in the Solution Explorer. Once a project is under Git source control it can be added to a remote GitHub repository by using tools available through Visual Studio. However, a technique preferred by many developers is to use Git for Windows . Git for Windows provides a BASH shell interface to GitHub which uses the same set of commands available at GitHub itself. Git for Windows integrates with Windows Explorer to allow a BASH shell to be opened on a project that has been added to a desktop Git repository. Simply point Windows Explorer at the folder containing the project solution file and select Git BASH Here from the context menu of the folder to open a Git for Windows BASH shell. Then execute Git commands from this shell window. Git for Windows also offers Git GUI, a graphical version of most Git command line functions. To open Git GUI simply select Git GUI Here from Windows Explorer.","title":"Git for Windows"},{"location":"Infrastructure/#github","text":"Application OPIDChecks is stored at GitHub as a repository under an account with the email address peter3418@ymail.com and account name tmhsplb. Only user tmhsplb can deploy directly to this repository. Any other user needing to deploy a version of OPIDChecks to this repository must be declared a collaborator on repository OPIDChecks by user tmhsplb. A collaborator is a user associated with a different account established at GitHub. Git for Windows was used to create a remote to save to this GitHub account. The remote was created in the Git BASH shell by opening the shell on the folder which contains the OPIDDaily.sln file (folder C:/VS2019Projects/OPIDChecks ) and issuing the command git remote add origin https://github.com/tmhsplb/opidchecks.git Creating this remote only needs to be done once, because Git for Windows stores the remote. To remove a remote use the command git remote rm myremote The need for this may arise if there was a typo in the creation of myremote.","title":"GitHub"},{"location":"Infrastructure/#appharbor","text":"AppHarbor (appharbor.com) is a Platform as a Service Provider which uses Amazon Web Services infrastructure for hosting applications and Git as a versioning tool. When an application is defined at AppHarbor, a Git repository is created to manage versions of the application's deployment. The OPIDChecks application is defined as an application at AppHarbor to create the production repository of the desktop application. The remote configured for OPIDChecks at AppHarbor is: https://tmhsplb@appharbor.com/opidchecks.git This remote is configured from a Windows Git BASH shell by the command git remote add opidchecks https://tmhsplb@appharbor.com/opidchecks.git After the remote is configured in the Git BASH shell, issuing the command git push opidchecks master will deploy the master branch of solution opidchecks to AppHarbor as application OPIDChecks, accessible through the URL https://opidchecks.apphb.com If you reset your password at AppHarbor, the 'git push' command will no longer work from the Git BASH shell. You need to have Git prompt you for your new password. To do this on a Windows 10 machine, go to Control Panel > User Accounts > Credential Manager > Windows Credentials and remove the AppHarbor entry under Generic Credentials. The next time you push, you will be prompted for your repository password. Application OPIDChecks is deployed using the free Canoe subscription level at AppHarbor. Under a Canoe subscription, the IIS application pool of application OPIDChecks has a 20 minute timeout, which forces OPIIDChecks to spin up its resources again after 20 minutes of idle time. The free Yocto version of SQL Server is used as an add-on to the OPIDChecks deployment. The Yocto version has a limit of 20MB of storage space. However, the database usage must be monitored to avoid exceeding the 20MB limit. See the Database Utilization section on the Database tab for how to do this. A paid subscription to a SQL Server at AppHarbor would alleviate this problem.","title":"AppHarbor"},{"location":"Infrastructure/#deployment","text":"This section summarizes deployment to AppHarbor. Much of the information here can be found in the section on AppHarbor. After configuring the master remote the Visual Studio production branch can be deployed to AppHarbor by using the Git BASH Shell command git push opidchecks master AppHarbor will automatically deploy application OPIDChecks if the push results in a successful build. After AppHarbor finishes building and deploying the code, application OPIDChecks can be viewed at https://opidchecks.apphb.com This URL can be bookmarked on the browser bookmarks bar for ease of access.","title":"Deployment"}]}